# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
commands:
  # Exercise: Reusable Job Code
  print_pipeline_id:
    parameters:
      id: 
        type: string
    steps:
      - run: echo << parameters.id >>
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!!!"
  create_cloud_formation_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloud Formation (Configure Server)
          command: |
            aws cloudformation deploy --template-file template.yml --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} --region us-east-1 
      - destroy_environment
  # Job: Config and Deployment
  configure_infrastructure: 
    docker:
      - image: cticti/aws-cli:python3.6-alpine
      #  python:3.7-alpine3.11c
    steps:
      - checkout
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints: ["16:8a:59:9c:4e:8d:b3:7d:e8:1b:27:38:2b:7c:db:65"] 
      - run:
          name: Install Ansible
          command: |
            # Install Ansible
            apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            # Configure the EC instance in AWS account 
            apk update
            apk upgrade
            apk add --update curl
            # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            # unzip awscliv2.zip
            # aws --version
            aws ec2 describe-instances --query Reservations[*].Instances[*].PublicIpAddress --output text >> inventory.txt --region us-east-1
            ansible-playbook -i inventory.txt main.yml 
  smoke_test:
    docker:
      # - image: python:3.7-alpine3.11
      - image: amazon/aws-cli
    steps:
      # - run: apk add --update curl
      - checkout
      - run:
          name: smoke test
          # command: |
          #   URL="https://blog.udacity.com/"
          #   if curl -s --head ${URL}
          #   then
          #     return 0
          #   else
          #     return 1
          #   fi
          # name: smoke test
          command: |
            return 1 
      - destroy_environment     
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  create-deploy-infrastructure-workflow:
    jobs:
      - say-hello
      # - create_cloud_formation_infrastructure
      # - configure_infrastructure:
      #     requires:
      #       - create_cloud_formation_infrastructure
      # - smoke_test



